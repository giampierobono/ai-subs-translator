name: Performance Testing

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build project
        run: npm run build
        
      - name: Prepare environment
        run: |
          # Create .env for testing (no real API keys needed for basic health check)
          cp .env.example .env
          echo "OPENAI_API_KEY=test-key-for-ci" >> .env
          echo "OPENSUBTITLES_API_KEY=test-key-for-ci" >> .env
          
      - name: Start services
        run: |
          # Build and start services
          docker compose up -d --build
          
          # Wait longer for services to be ready
          echo "Waiting for services to start..."
          sleep 60
          
          # Check if containers are running
          docker compose ps
          
          # Show logs if something is wrong
          echo "=== Server logs ==="
          docker compose logs server
          echo "=== Addon logs ==="
          docker compose logs addon
          
      - name: Run performance tests
        run: |
          # Install hey for load testing
          wget https://hey-release.s3.us-east-2.amazonaws.com/hey_linux_amd64
          chmod +x hey_linux_amd64
          
          # Wait for services to be ready with retry logic
          echo "Waiting for server to be ready..."
          for i in {1..30}; do
            if curl -f http://localhost:8787/health >/dev/null 2>&1; then
              echo "Server is ready!"
              break
            fi
            echo "Attempt $i/30: Server not ready yet, waiting..."
            sleep 2
          done
          
          echo "Waiting for addon to be ready..."
          for i in {1..30}; do
            if curl -f http://localhost:7000/manifest.json >/dev/null 2>&1; then
              echo "Addon is ready!"
              break
            fi
            echo "Attempt $i/30: Addon not ready yet, waiting..."
            sleep 2
          done
          
          # Final health checks with verbose output
          echo "Testing server health endpoint..."
          curl -v http://localhost:8787/health || {
            echo "Server health check failed!"
            docker compose logs server
            exit 1
          }
          
          echo "Testing addon manifest endpoint..."
          curl -v http://localhost:7000/manifest.json || {
            echo "Addon health check failed!"
            docker compose logs addon
            exit 1
          }
          
          # Load test server health endpoint - 50 requests, 5 concurrent
          echo "Running server performance test..."
          ./hey_linux_amd64 -n 50 -c 5 http://localhost:8787/health > server-performance.txt
          
          # Load test addon manifest endpoint - 50 requests, 5 concurrent  
          echo "Running addon performance test..."
          ./hey_linux_amd64 -n 50 -c 5 http://localhost:7000/manifest.json > addon-performance.txt
          
          # Show results
          echo "## Server Performance Results" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          cat server-performance.txt >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          
          echo "## Addon Performance Results" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          cat addon-performance.txt >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          
      - name: Memory usage check
        run: |
          echo "## Memory Usage" >> $GITHUB_STEP_SUMMARY
          docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}" >> $GITHUB_STEP_SUMMARY
          
      - name: Cleanup
        if: always()
        run: docker compose down
