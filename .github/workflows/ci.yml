name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read
  packages: write

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # === LINT & TYPE CHECK ===
  lint:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Lint code (available packages only)
        run: npm run lint
        continue-on-error: true
        
      - name: Type check
        run: npx tsc --noEmit

  # === BUILD & TEST ===
  build:
    name: Build & Test
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      matrix:
        package: [server, addon]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build packages
        run: npx turbo run build --filter=@ai-subs-translator/${{ matrix.package }}
        
      - name: Run tests (if available)
        run: npx turbo run test --filter=@ai-subs-translator/${{ matrix.package }} --continue
        continue-on-error: true
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.package }}
          path: apps/${{ matrix.package }}/dist/
          retention-days: 7

  # === DOCKER BUILD ===
  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push'
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        service: [server, addon]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Container Registry
        if: github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=sha,prefix=commit-
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ matrix.service }}.Dockerfile
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # === SECURITY AUDIT ===
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run security audit
        run: npm audit
        
      - name: Check for vulnerabilities
        run: npx audit-ci --config audit-ci.json
        continue-on-error: true

  # === DEPLOY TO STAGING ===
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [docker-build, security]
    if: github.ref == 'refs/heads/develop' && vars.DEPLOY_ENABLED == 'true'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Deploy Server to Render Staging
        uses: johnbeynon/render-deploy-action@v0.0.8
        with:
          service-id: ${{ secrets.RENDER_SERVER_SERVICE_ID_STAGING }}
          api-key: ${{ secrets.RENDER_API_KEY }}
          
      - name: Deploy Addon to Render Staging
        uses: johnbeynon/render-deploy-action@v0.0.8
        with:
          service-id: ${{ secrets.RENDER_ADDON_SERVICE_ID_STAGING }}
          api-key: ${{ secrets.RENDER_API_KEY }}
          
  # === DEPLOY TO PRODUCTION ===
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker-build, security]
    if: github.ref == 'refs/heads/main' && vars.DEPLOY_ENABLED == 'true'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Deploy Server to Render Production
        uses: johnbeynon/render-deploy-action@v0.0.8
        with:
          service-id: ${{ secrets.RENDER_SERVER_SERVICE_ID_PROD }}
          api-key: ${{ secrets.RENDER_API_KEY }}
          
      - name: Deploy Addon to Render Production
        uses: johnbeynon/render-deploy-action@v0.0.8
        with:
          service-id: ${{ secrets.RENDER_ADDON_SERVICE_ID_PROD }}
          api-key: ${{ secrets.RENDER_API_KEY }}
          
      - name: Post-deployment health check
        run: |
          # Wait for deployment to be ready
          sleep 30
          
          # Health check for server
          if [ -n "${{ secrets.RENDER_SERVER_URL }}" ]; then
            HEALTH_URL="${{ secrets.RENDER_SERVER_URL }}/health"
            echo "Checking server health at: $HEALTH_URL"
            curl -f "$HEALTH_URL" || echo "Server health check failed"
          fi
          
          # Health check for addon
          if [ -n "${{ secrets.RENDER_ADDON_URL }}" ]; then
            ADDON_URL="${{ secrets.RENDER_ADDON_URL }}/manifest.json"
            echo "Checking addon health at: $ADDON_URL"
            curl -f "$ADDON_URL" || echo "Addon health check failed"
          fi
          
          echo "âœ… Production deployment completed!"
